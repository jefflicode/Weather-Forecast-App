{"ast":null,"code":"var _jsxFileName = \"/Users/jefflee/Desktop/weather-app/src/App.js\";\nimport React from 'react'; // import React object from the react package in the package.json file\n\nimport Titles from \"./components/Titles\";\nimport Form from './components/Form';\nimport Weather from './components/Weather'; // This is the wrapper componenet that will contain all the other tiny components \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"5aa9b916971ad212f9cd5f0fc1e8ce4f\"; // First Initialize a component\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    };\n\n    this.getWeather = async e => {\n      e.preventDefault(); // prevent page refresh when getting data from API\n\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`); // template string allows you to inject the variable you defined within a file \n\n      const data = await api_call.json();\n\n      if (city && country) {\n        // when user tries to seach weather without giving input, this would make sure our program won't break (error)\n        console.log(data); // display the data Object obtained from API call\n\n        this.setState( // always use setState instead of directly doing variable assignment\n        {\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: undefined\n        });\n      } // state is responsible for keeping track of the change of data within a component \n\n    };\n  }\n\n  render() {\n    // render is a built in method from react component, it returns jsx (not html)\n    return (\n      /*#__PURE__*/\n      // make sure to return only one div, (one parent element)\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Titles, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          getWeather: this.getWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Weather, {\n          temperature: this.state.temperature,\n          humidity: this.state.humidity,\n          city: this.state.city,\n          country: this.state.country,\n          description: this.state.description,\n          error: this.state.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this) // whatever is rended in here will get displayed on the screen \n\n    );\n  }\n\n}\n\nexport default App; // how react works:\n// multiple tiny UI component files get imported into App.js\n// then App.js would render those files into the public index.html file, then display to the web browser","map":{"version":3,"sources":["/Users/jefflee/Desktop/weather-app/src/App.js"],"names":["React","Titles","Form","Weather","API_KEY","App","Component","state","temperature","undefined","city","country","humidity","description","error","getWeather","e","preventDefault","target","elements","value","api_call","fetch","data","json","console","log","setState","main","temp","name","sys","weather","render"],"mappings":"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","sourcesContent":["import React from 'react'; // import React object from the react package in the package.json file\nimport Titles from \"./components/Titles\";\nimport Form from './components/Form';\nimport Weather from './components/Weather'\n\n// This is the wrapper componenet that will contain all the other tiny components \n\nconst API_KEY = \"5aa9b916971ad212f9cd5f0fc1e8ce4f\";\n\n// First Initialize a component\nclass App extends React.Component {  // React.Component lives in node_modules\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault(); // prevent page refresh when getting data from API\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n                                // template string allows you to inject the variable you defined within a file \n    \n    const data = await api_call.json();\n\n    if (city && country) {// when user tries to seach weather without giving input, this would make sure our program won't break (error)\n      console.log(data); // display the data Object obtained from API call\n      this.setState(  // always use setState instead of directly doing variable assignment\n        {\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        }\n      );\n    } else {\n      this.setState(\n        {\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: undefined\n        }\n      );\n    }\n\n\n    // state is responsible for keeping track of the change of data within a component \n  }\n  render() { // render is a built in method from react component, it returns jsx (not html)\n      return (  // make sure to return only one div, (one parent element)\n        <div>\n          <Titles />\n          <Form getWeather={this.getWeather}/>\n          <Weather \n            temperature={this.state.temperature} \n            humidity={this.state.humidity}\n            city={this.state.city}\n            country={this.state.country}\n            description={this.state.description}\n            error={this.state.error}\n          />\n        </div>           // whatever is rended in here will get displayed on the screen \n      )\n  }\n}\n\nexport default App;\n\n// how react works:\n// multiple tiny UI component files get imported into App.js\n// then App.js would render those files into the public index.html file, then display to the web browser"]},"metadata":{},"sourceType":"module"}